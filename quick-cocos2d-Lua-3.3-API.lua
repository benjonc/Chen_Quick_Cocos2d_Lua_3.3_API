----------------------------start----------------------------
--Lua类的创建

local myClassScene = class("myClassScene",function()  --function()是继承
	return display.newScene("myClassScene")
	end)

	--成员变量的声明方法
	myScene.id = 10
	myScene.name = "李四"
	myScene.age = 20

	function myClassScene:ctor()		--ctor是构造函数

	end

return myClassScene

-----------------------------end-----------------------------


----------------------------start----------------------------
--一般常用的方法
local myNode = display.newNode()
local myNode1 = display.newNode()
	--设置位置
myNode:setPosition(x,y)
	--添加子节点到父节点
		--1.父节点加子节点
myNode:addChild(myNode1)
		--2.子节点加到父节点
myNode1:addTo(myNode)
	--设置相对位置
myNode:align(display.CENTER, x, y)
	--点的创建
local myPoint = cc.p(x,y)
	--设置锚点
myNode:setAnchorPoint(cc.p(0.5,1))
	--设置Tag值
myNode:setTag(tag)
	--设置深度值
myNode:setLocalZOrder(ZOrder)
	--获取节点的碰撞矩形
local myRect = myNode:getBoundingBox()
	--获取点击的点
local myTouchPoint = cc.p(event.x,event.y)
	--判断点是否在矩形范围内
local isInRect = cc.rectContainsPoint(myRect,myTouchPoint)  --bool值

-----------------------------end-----------------------------


----------------------------start----------------------------
--场景创建的方法-->Scene创建

local myScene = display.newScene("myScene")

-----------------------------end-----------------------------


----------------------------start----------------------------
--层的创建的方法-->Layer创建
--1.一般层的创建

local myLayer = display.newLayer()

--2.颜色层的创建的方法-->ColorLayer创建

local myColorLayer = display.newColorLayer(cc.c4b(255,255,255,255))

-----------------------------end-----------------------------


----------------------------start----------------------------
--精灵的创建的方法-->Sprite创建
	--1.一般创建方法
local mySprite1 = display.newSprite("图片名称",'坐标x','坐标y')

	--2.通过SpriteFrame创建

	--3.通过plist和png创建

display.addSpriteFrames("plist文件","plist打包的png图片")
local sprite3 = display.newSprite("#plist里的图片")

local spriteframe1 = display.newSpriteFrame("plist里的图片")
		--通过SpriteFrame改变精灵显示的图片
sprite2:setSpriteFrame(spriteframe1)

-----------------------------end-----------------------------


----------------------------start----------------------------
--场景的切换

local scene1 = require("app.scenes.场景类")
	--方法1
display.replaceScene(scene1.new(),"fade",0.6,display.COLOR_WHITE)
	--方法2
app.enterScene(scene1.new(), nil, "fade", 0.6, display.COLOR_WHITE)

-----------------------------end-----------------------------


----------------------------start----------------------------
--Button
	--1.按钮的创建-->Button创建
local button1 = cc.ui.UIPushButton.new({
			normal = "平常状态的按钮图片"
			pressed = "按下状态的按钮图片"
			disable = "禁用状态的状态图片"
			})

	--2.按下按钮需要执行的事件-->按钮点击事件
button1:onButtonClicked( function ( event )
	local bt = event.target()  --获取到当前点击的目标
	--按钮被点击后，需要执行的功能
end)

-----------------------------end-----------------------------


----------------------------start----------------------------
--Label的创建-->Label创建

local btable = cc.ui.UILabel.new({
    UILableType = 2,
    text = "点击切换背景图片",
    font = "Marker Felt",
    size = 20,
    color = cc.c3b(0, 0,0)
    --color = cc.cc.c3b(255, 255, 255)    
    --aligh = cc.ui.TEXT_VALIGN_TOP
    })

-----------------------------end-----------------------------


----------------------------start----------------------------
--XML的简单解析
require("src.app.utils.XmlParser")		--需要导入解析库
local myLxpTab = {}		--创建一个用来存储解析数据的表

local path = cc.FileUtils:getInstance():fullPathForFilename("MyData.XML")		--相对路径转绝对路径
local ext = io.exists(path) 		--防御式编程
if ext then 
	local xmlMap = io.readfile(path) 		--读取XML的文本文档
	local xmlData = XmlParser:ParseXmlText(xmlMap)		--把读取的文本文档解析为需要的数据
	myLxpTab = xmlData.config:children()		--把解析的数据存放到指定的表里
end

-----------------------------end-----------------------------


----------------------------start----------------------------
--定时器的用法
	--1.简单用法
local myUpdateLayer = display.newLayer()
myUpdateLayer:scheduleUpdate()
myUpdateLayer:addNodeEventListener(cc.NODE_ENTER_FRAME_EVENT, function(dt)
	--每帧需要执行的功能
end)
	    	
-----------------------------end-----------------------------


----------------------------start----------------------------
--动画创建
display.addSpriteFrames("MyAnimation.plist","MyAnimation.png")
local myFrames = display.newFrames("Txdaizi%02d.png",1,9)
local animations = display.newAnimation(myFrames, 1.3 / 9 )
local animationSprite = display.newSprite("图片名称"):playAnimationOnce(animations)

-----------------------------end-----------------------------


----------------------------start----------------------------
--触摸事件
local myTouchNode = display.newNode() 		--创建一个节点
myTouchNode:setTouchEnabled(true)		--开启触摸
myTouchNode:setTouchSwallowEnabled(false)		--设置触摸吞咽功能
myTouchNode:setTouchMode(cc.TOUCH_MODE_ONE_BY_ONE)		--设置单点触摸
	--事件监听
myTouchNode:addNodeEventListener(cc.NODE_TOUCH_EVENT, function (event) 
	if event.name == "began" then 		--点击开始
		--began需要执行的功能
	end
	elseif event.name == "moved" then 		--点击移动
		--moved需要执行的功能
	end
	elseif event.name == "ended" then 		--点击结束
		--ended需要执行的功能
	end
	return true
end)

-----------------------------end-----------------------------


----------------------------start----------------------------
--创建一条直线
local myLine = display.newLine({
	{event.prevX, event.prevY}, --起始点
	{event.x, event.y}}, 		--终止点
	{
	    borderColor = cc.c4f(1.0, 0.0, 0.0, 1.0),		--线的颜色
	    borderWidth = 1		--线的宽度
	})

-----------------------------end-----------------------------


----------------------------start----------------------------
--action相关
local myPlayNode = display.newNode()
local myMoveToAction = cc.MoveTo:create(time,cc.p(x,y)) 		--time动画执行的时间，cc.p(x,y)移动到的位置
local myScaleAction = cc.ScaleTo:create(time,scaleInt) 		--time达到缩放比例需要的时间，scaleInt缩放值
local mySequence = cc.cc.Sequence:create(myMoveToAction,myScaleAction)
myPlayNode:runAction(mySequence)

-----------------------------end-----------------------------


----------------------------start----------------------------
--输入框的添加
local function myOnEdit(event, editbox)
	if event == "began" then
		-- 开始输入
		print("开始输入")
	end
	elseif event == "changed" then
		-- 输入框内容发生变化
		print("输入框内容发生变化")
		local text = editbox:getText()
		print(text)
	end
	elseif event == "ended" then
		-- 输入结束
		print("输入结束")
	end
	elseif event == "return" then
		-- 从输入框返回
		print("从输入框返回")
	end
end

local editbox = cc.ui.UIInput.new({
	image = "editbox.png", -- 输入控件的背景
	listener = myOnEdit, -- 绑定输入监听事件处理方法
	x = 200,
	y = 300,
	size = cc.size(200, 40)
	})
editbox:addTo(self)
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------

----------------------------start----------------------------
-----------------------------end-----------------------------
